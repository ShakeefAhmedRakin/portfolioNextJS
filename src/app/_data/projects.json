[
  {
    "id": "blood-bridge",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Blood Bridge",
    "subtitle": "Blood Donation Management Platform",
    "coverPhoto": {
      "caption": "BloodBridge - Site Overview",
      "url": "/projects/web/bloodbridge/cover.png",
      "alt": "Blood Bridge - Cover Photo"
    },
    "date": "2023-11-25",
    "tags": ["React", "Express", "Node.js", "MongoDB", "Firebase"],
    "summary": "This project is a web application designed to connect blood donors, recipients, and volunteers. It includes features like user role management, donation request handling, and content creation. Donors can manage profiles and donation requests, while volunteers can update donation statuses and manage requests. Admins have full control over user accounts, donation management, and blog content. The platform also supports secure payments through Stripe for funding donations. It is built with a responsive design, ensuring usability across mobile, tablet, and desktop devices. The application leverages Firebase authentication, JWT tokens for security, and integrates with MongoDB for efficient data management.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/BloodBridge-Client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/BloodBridge-Server"
      }
    ],
    "demoLinks": [
      {
        "label": "View Website",
        "url": "https://bloodbridge-140aa.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Roles and Permissions Management",
          "points": [
            "User role based access to features and content.",
            "Admin with full access to user management, donation requests, and content management.",
            "Volunteer with limited access to update donation statuses, view donation requests and content management.",
            "Donors with access to registration, donation request creation, profile management, and donation response."
          ]
        },
        {
          "title": "Admin Role",
          "points": [
            "Manage users (view, block/unblock, change roles).",
            "Manage all donation requests (create, edit, delete, view).",
            "Full control over content management for blogs (create, publish, delete).",
            "View and manage statistical data (total users, funding, blood donation requests)."
          ]
        },
        {
          "title": "Donor Role",
          "points": [
            "Register and manage personal profiles (view and update).",
            "Create, edit, view, and delete donation requests.",
            "Respond to donation responses from others."
          ]
        },
        {
          "title": "Volunteer Role",
          "points": [
            "Manage donation requests (view, edit).",
            "Role-based access control",
            "View statistical data (total users, funding, blood donation requests)."
          ]
        },
        {
          "title": "Public Pages",
          "points": [
            "Search Page for users to search for donors based on queries.",
            "Requests Page with a public list of pending blood donation requests.",
            "Blog Page Showcases published blogs written by admins or volunteers with rich-text support.",
            "Funding Page for user donations through Stripe Payment Gateway."
          ]
        },
        {
          "title": "Technical Features",
          "points": [
            "Firebase authentication for secure user authentication.",
            "JWT token-based authentication for role-based access control for all APIs.",
            "Stripe implementation for handling donation from funding page.",
            "Responsive UI across mobile, tablet, and desktop devices."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Tailwind CSS",
          "DaisyUI",
          "Material-UI",
          "Flowbite",
          "React Icons",
          "TanStack Query",
          "Axios",
          "React Hook Form",
          "Sonner",
          "SweetAlert2",
          "Stripe.js",
          "Jodit React",
          "React Share",
          "AOS",
          "React Helmet"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "Mongoose",
          "JWT (JSON Web Tokens)",
          "CORS",
          "Dotenv",
          "Stripe API"
        ]
      },
      {
        "title": "Deployment",
        "techList": ["Vercel", "Firebase Hosting"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "BloodBridge is a full-stack web application I built to connect blood donors with recipients in need. The project was a hands-on way for me to learn and apply the MERN stack (MongoDB, Express.js, React, Node.js) in a real-world project context. It focuses on key areas like role-based access control, user authentication, and data managementâ€”providing a user-friendly interface for managing blood donations."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Getting Started",
        "imageOnLeft": false,
        "content": {
          "text": "The Register Page lets users create an account by entering their email, name, and password. Users can upload a profile picture, select their blood group, and choose their district and upazila from dropdown menus. There is also a password confirmation field to avoid mistakes. If users already have an account, they can click the link to go to the login page. The process is simple and quick, making it easy to start using the platform.",
          "image": {
            "caption": "Register Page",
            "url": "/projects/web/bloodbridge/gallery1.png",
            "alt": "BloodBridge - Register Page"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": true,
        "title": "The Landing Page",
        "content": {
          "image": {
            "caption": "Landing Page",
            "url": "/projects/web/bloodbridge/gallery2.png",
            "alt": "BloodBridge - Register Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The landing page introduces the platform, highlighting its purpose to connect blood donors with recipients, and provides easy navigation to key sections like Blogs, Requests, and Funding. The page also includes a profile dropdown for users to access their dashboard for managing their accounts and other features based on their roles."
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": "",
        "content": [
          "Requests Page: Displays a list of pending blood donation requests and allows users to search and filter them.",
          "Search Page: Enables users to find donors based on criteria such as blood type and location.",
          "Funding Page: Allows users to contribute funds securely through Stripe integration.",
          "Blog Page: Showcases articles written by admins or volunteers with support for rich-text formatting."
        ]
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Donor Dashboard",
        "imageOnLeft": false,
        "content": {
          "text": "The donor dashboard allows donors to manage their profiles, create and edit donation requests, and view or delete existing requests. Donors can also respond to messages or actions related to their donation requests, ensuring they stay informed and connected with recipients.",
          "image": {
            "caption": "Donor Dashboard",
            "url": "/projects/web/bloodbridge/gallery3.png",
            "alt": "BloodBridge - Donor Dashboard"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Volunteer Dashboard",
        "content": "The volunteer dashboard provides tools for managing donation requests and viewing platform statistics. Volunteers can access a list of all donation requests, edit their details, and update their statuses to ensure accurate tracking. They can view statistical data, including the total number of users, active funding contributions, and blood donation requests."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Volunteer Dashboard",
            "url": "/projects/web/bloodbridge/gallery4.png",
            "alt": "BloodBridge - Volunteer Dashboard"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "Volunteer Dashboard",
        "content": "This dashboard is designed to help volunteers focus on monitoring and maintaining the accuracy of information across the platform. Volunteers do not have access to user management or funding controls, keeping their scope of actions specific to donation-related tasks."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Rich-Text Blog Editor",
        "imageOnLeft": true,
        "content": {
          "text": "The blogging tool allows both volunteers and admins to create, edit, and publish blog posts using a simple rich-text editor. It supports basic formatting options like headings, bold, italics, bullet points, and hyperlinks. Users can add images, format text, and organize content for better readability. Admins have full control over the publication, while volunteers can write and submit posts for review. This tool is designed to make content creation straightforward and ensure blogs are easy to read and manage.",
          "image": {
            "caption": "Blog Editor",
            "url": "/projects/web/bloodbridge/gallery5.png",
            "alt": "BloodBridge - Blog Editor"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Admin Dashboard",
        "content": "The admin dashboard allows full control over user management. Admins can view all user accounts, block or unblock users, and change user roles (Admin, Volunteer, Donor). They can quickly search for specific users and make necessary adjustments. This ensures that admins can manage platform users efficiently, ensuring appropriate access and maintaining smooth operation."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Admin Dashboard - User Management",
            "url": "/projects/web/bloodbridge/gallery7.png",
            "alt": "BloodBridge - Admin User Management"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The blog management section gives admins the ability to create, edit, publish, and delete blog posts. They can oversee all content, ensuring it is accurate and aligned with the platformâ€™s goals. Admins can manage the entire lifecycle of a blog post, from drafting to publication, and remove any content if needed. This feature ensures the platform's blog section remains organized and up to date."
      },
      {
        "type": "text-image",
        "hasTitle": false,
        "title": "Rich-Text Blog Editor",
        "imageOnLeft": false,
        "content": {
          "text": "Admins can manage all donation requests through the dashboard. They have the ability to create new requests, edit existing ones, delete irrelevant or outdated requests, and view details of all donation requests on the platform. This gives admins full oversight and control over the blood donation process, ensuring requests are properly handled and updated.",
          "image": {
            "caption": "Admin Dashboard - Donation Management",
            "url": "/projects/web/bloodbridge/gallery6.png",
            "alt": "BloodBridge - Admin Donation Management"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Responsive Design",
        "content": "The BloodBridge platform is designed to be fully responsive, meaning it adapts to different devices, including mobile phones, tablets, and desktop computers. The interface adjusts to various screen sizes, offering users a consistent and user-friendly experience across all devices. This ensures accessibility and ease of use, regardless of how users access the platform."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Responsive Design",
            "url": "/projects/web/bloodbridge/gallery8.png",
            "alt": "BloodBridge - Responsive Design"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Final Conclusion",
        "content": "Working on this project has given me valuable experience in building a full-stack application with real-world functionality. It taught me how to implement secure user authentication, particularly protecting private API endpoints using JWT tokens. This allowed me to handle role-based access and ensure that sensitive data was only accessible to authorized users. I also gained hands-on experience with integrating third-party services like Stripe for payment processing. Overall, the project strengthened my skills in both front-end and back-end development, helping me understand the complexities of building and securing a full-stack web application."
      }
    ]
  },
  {
    "id": "topshelf",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Top Shelf",
    "subtitle": "Library Management System",
    "coverPhoto": {
      "caption": "TopShelf - Site Overview",
      "url": "/projects/web/topshelf/cover.png",
      "alt": "TopShelf - Cover Photo"
    },
    "date": "2023-11-09",
    "tags": ["React", "Express", "Node.js", "MongoDB", "Firebase"],
    "summary": "TopShelf is a user-centric library management system designed to allow users to browse, borrow, and return books easily. The platform features a responsive design, category-based book display, borrowing and return system, and robust user authentication with Firebase. It integrates JWT tokens for secure operations and allows users to download books as PDFs. TopShelf ensures a seamless experience across devices with key features focused on usability and security.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/TopShelf-client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/TopShelf-server"
      }
    ],
    "demoLinks": [
      {
        "label": "View Website",
        "url": "https://topshelf-79995.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Book Management",
          "points": [
            "Category-based book display for easy browsing.",
            "Detailed book information with borrow or read options.",
            "Each category links to a list of relevant books, with full book details available."
          ]
        },
        {
          "title": "Borrowing and Return System",
          "points": [
            "Borrow button prompts a modal for selecting return dates.",
            "Borrowed Books page tracks borrowed books with return dates and a return button.",
            "Borrowing decreases book quantity and adds books to userâ€™s borrowed list."
          ]
        },
        {
          "title": "Authentication and Security",
          "points": [
            "Firebase authentication for secure user login (email/password or Google).",
            "JWT token-based verification for secure CRUD operations on book-related pages.",
            "Error handling implemented for registration and login forms."
          ]
        },
        {
          "title": "Additional Features",
          "points": [
            "Responsive design across desktop and mobile.",
            "Theme toggle for dark/light modes.",
            "Downloadable book pages in PDF format.",
            "User-filtered borrowed books section."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Tailwind CSS",
          "DaisyUI",
          "Flowbite",
          "React Icons",
          "React Router",
          "Firebase",
          "Sonner",
          "SwiperJS",
          "react-rating"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "CORS",
          "Dotenv",
          "JWT",
          "Axios"
        ]
      },
      {
        "title": "Deployment",
        "techList": ["Vercel", "Firebase Hosting"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "TopShelf is a library management system built to efficiently manage book collections. I focused on developing an intuitive system for browsing, borrowing, and returning books. By implementing features such as book management, borrowing/returning systems, and secure user authentication, I gained hands-on experience in full-stack development, from the frontend interface to backend processes and security."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Book Categories and Details",
        "imageOnLeft": false,
        "content": {
          "text": "TopShelf organizes books into distinct categories for easy browsing. Each book has detailed information and offers the option to borrow or read. I implemented a real-time book availability system, which involved manipulating the data flow between the frontend and backend. This required working with React for dynamic content updates and integrating MongoDB to track book status and availability.",
          "image": {
            "caption": "Book Categories",
            "url": "/projects/web/topshelf/gallery1.png",
            "alt": "TopShelf - Book Categories"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": true,
        "title": "Borrowing and Return System",
        "content": {
          "image": {
            "caption": "Borrow and Return Book Modal",
            "url": "/projects/web/topshelf/gallery2.png",
            "alt": "TopShelf - Borrow and Return Modal"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The borrowing and return system in TopShelf allows users to borrow books by selecting return dates. I implemented this feature by creating modals for date selection, which interact with the backend to update book availability. I also developed the 'Borrowed Books' page where users can manage their borrowed books and view the return dates. The challenge here was ensuring accurate updates in real-time to reflect borrowing actions and availability."
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": "",
        "content": [
          "Borrowing books triggers an update in the backend, which adjusts availability and adds the book to the user's borrowed list.",
          "The borrowed books page displays details such as borrow and return dates, which I built using React to dynamically render content from the database.",
          "Books can be returned by modifying the borrowed status and updating the book count in real-time, which required handling backend routes with Express."
        ]
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "User Authentication",
        "imageOnLeft": false,
        "content": {
          "text": "I integrated Firebase authentication to allow users to sign up and log in using either email/password or Google login. This required setting up Firebase on the backend and ensuring that authentication tokens were stored securely. To further enhance security, I used JWT tokens to authenticate API requests and authorize CRUD operations on book data, making sure only authenticated users could perform certain actions.",
          "image": {
            "caption": "Login Page",
            "url": "/projects/web/topshelf/gallery3.png",
            "alt": "TopShelf - Login Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "PDF Download and User-Specific Features",
        "content": "I implemented a feature that allows users to download pages of books as PDFs. This involved integrating a PDF generation library on the frontend to convert book content into downloadable files. Additionally, I developed a user-specific borrowed books section to track individual borrowings. This section retrieves data from MongoDB and dynamically updates based on the authenticated user, which helped me improve my skills in working with data filtering and user-specific views."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Borrowed Books Page",
            "url": "/projects/web/topshelf/gallery4.png",
            "alt": "TopShelf - Borrowed Books Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Final Conclusion",
        "content": "Developing TopShelf was an excellent opportunity to apply and refine my full-stack development skills. I gained extensive experience in frontend and backend development, working with technologies like React, Node.js, Express, and MongoDB. Implementing JWT authentication, real-time data updates, and PDF generation allowed me to deepen my understanding of web security, data management, and user interface development. Each feature presented its own challenges, and solving these helped me grow as a developer."
      }
    ]
  },
  {
    "id": "topshelf",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Top Shelf",
    "subtitle": "Library Management System",
    "coverPhoto": {
      "caption": "TopShelf - Site Overview",
      "url": "/projects/web/topshelf/cover.png",
      "alt": "TopShelf - Cover Photo"
    },
    "date": "2023-11-09",
    "tags": ["React", "Express", "Node.js", "MongoDB", "Firebase"],
    "summary": "TopShelf is a user-centric library management system designed to allow users to browse, borrow, and return books easily. The platform features a responsive design, category-based book display, borrowing and return system, and robust user authentication with Firebase. It integrates JWT tokens for secure operations and allows users to download books as PDFs. TopShelf ensures a seamless experience across devices with key features focused on usability and security.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/TopShelf-client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/TopShelf-server"
      }
    ],
    "demoLinks": [
      {
        "label": "View Website",
        "url": "https://topshelf-79995.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Book Management",
          "points": [
            "Category-based book display for easy browsing.",
            "Detailed book information with borrow or read options.",
            "Each category links to a list of relevant books, with full book details available."
          ]
        },
        {
          "title": "Borrowing and Return System",
          "points": [
            "Borrow button prompts a modal for selecting return dates.",
            "Borrowed Books page tracks borrowed books with return dates and a return button.",
            "Borrowing decreases book quantity and adds books to userâ€™s borrowed list."
          ]
        },
        {
          "title": "Authentication and Security",
          "points": [
            "Firebase authentication for secure user login (email/password or Google).",
            "JWT token-based verification for secure CRUD operations on book-related pages.",
            "Error handling implemented for registration and login forms."
          ]
        },
        {
          "title": "Additional Features",
          "points": [
            "Responsive design across desktop and mobile.",
            "Theme toggle for dark/light modes.",
            "Downloadable book pages in PDF format.",
            "User-filtered borrowed books section."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Tailwind CSS",
          "DaisyUI",
          "Flowbite",
          "React Icons",
          "React Router",
          "Firebase",
          "Sonner",
          "SwiperJS",
          "react-rating"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "CORS",
          "Dotenv",
          "JWT",
          "Axios"
        ]
      },
      {
        "title": "Deployment",
        "techList": ["Vercel", "Firebase Hosting"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "TopShelf is a library management system built to efficiently manage book collections. I focused on developing an intuitive system for browsing, borrowing, and returning books. By implementing features such as book management, borrowing/returning systems, and secure user authentication, I gained hands-on experience in full-stack development, from the frontend interface to backend processes and security."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Book Categories and Details",
        "imageOnLeft": false,
        "content": {
          "text": "TopShelf organizes books into distinct categories for easy browsing. Each book has detailed information and offers the option to borrow or read. I implemented a real-time book availability system, which involved manipulating the data flow between the frontend and backend. This required working with React for dynamic content updates and integrating MongoDB to track book status and availability.",
          "image": {
            "caption": "Book Categories",
            "url": "/projects/web/topshelf/gallery1.png",
            "alt": "TopShelf - Book Categories"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": true,
        "title": "Borrowing and Return System",
        "content": {
          "image": {
            "caption": "Borrow and Return Book Modal",
            "url": "/projects/web/topshelf/gallery2.png",
            "alt": "TopShelf - Borrow and Return Modal"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The borrowing and return system in TopShelf allows users to borrow books by selecting return dates. I implemented this feature by creating modals for date selection, which interact with the backend to update book availability. I also developed the 'Borrowed Books' page where users can manage their borrowed books and view the return dates. The challenge here was ensuring accurate updates in real-time to reflect borrowing actions and availability."
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": "",
        "content": [
          "Borrowing books triggers an update in the backend, which adjusts availability and adds the book to the user's borrowed list.",
          "The borrowed books page displays details such as borrow and return dates, which I built using React to dynamically render content from the database.",
          "Books can be returned by modifying the borrowed status and updating the book count in real-time, which required handling backend routes with Express."
        ]
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "User Authentication",
        "imageOnLeft": false,
        "content": {
          "text": "I integrated Firebase authentication to allow users to sign up and log in using either email/password or Google login. This required setting up Firebase on the backend and ensuring that authentication tokens were stored securely. To further enhance security, I used JWT tokens to authenticate API requests and authorize CRUD operations on book data, making sure only authenticated users could perform certain actions.",
          "image": {
            "caption": "Login Page",
            "url": "/projects/web/topshelf/gallery3.png",
            "alt": "TopShelf - Login Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "PDF Download and User-Specific Features",
        "content": "I implemented a feature that allows users to download pages of books as PDFs. This involved integrating a PDF generation library on the frontend to convert book content into downloadable files. Additionally, I developed a user-specific borrowed books section to track individual borrowings. This section retrieves data from MongoDB and dynamically updates based on the authenticated user, which helped me improve my skills in working with data filtering and user-specific views."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Borrowed Books Page",
            "url": "/projects/web/topshelf/gallery4.png",
            "alt": "TopShelf - Borrowed Books Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Final Conclusion",
        "content": "Developing TopShelf was an excellent opportunity to apply and refine my full-stack development skills. I gained extensive experience in frontend and backend development, working with technologies like React, Node.js, Express, and MongoDB. Implementing JWT authentication, real-time data updates, and PDF generation allowed me to deepen my understanding of web security, data management, and user interface development. Each feature presented its own challenges, and solving these helped me grow as a developer."
      }
    ]
  }
]
