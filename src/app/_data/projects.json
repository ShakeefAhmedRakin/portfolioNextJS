[
  {
    "id": "blood-bridge",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Blood Bridge",
    "subtitle": "Blood Donation Management Platform",
    "coverPhoto": {
      "caption": "BloodBridge - Site Overview",
      "url": "/projects/web/bloodbridge/cover.png",
      "alt": "Blood Bridge - Cover Photo"
    },
    "date": "2023-11-25",
    "tags": ["MongoDB", "Express.js", "React.js", "Node.js", "Firebase"],
    "summary": "This project is a web application designed to connect blood donors, recipients, and volunteers. It includes features like user role management, donation request handling, and content creation. Donors can manage profiles and donation requests, while volunteers can update donation statuses and manage requests. Admins have full control over user accounts, donation management, and blog content. The platform also supports secure payments through Stripe for funding donations. It is built with a responsive design, ensuring usability across mobile, tablet, and desktop devices. The application leverages Firebase authentication, JWT tokens for security, and integrates with MongoDB for efficient data management.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/BloodBridge-Client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/BloodBridge-Server"
      }
    ],
    "demoLinks": [
      {
        "label": "Website",
        "url": "https://bloodbridge-140aa.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Roles and Permissions Management",
          "points": [
            "User role based access to features and content.",
            "Admin with full access to user management, donation requests, and content management.",
            "Volunteer with limited access to update donation statuses, view donation requests and content management.",
            "Donors with access to registration, donation request creation, profile management, and donation response."
          ]
        },
        {
          "title": "Admin Role",
          "points": [
            "Manage users (view, block/unblock, change roles).",
            "Manage all donation requests (create, edit, delete, view).",
            "Full control over content management for blogs (create, publish, delete).",
            "View and manage statistical data (total users, funding, blood donation requests)."
          ]
        },
        {
          "title": "Donor Role",
          "points": [
            "Register and manage personal profiles (view and update).",
            "Create, edit, view, and delete donation requests.",
            "Respond to donation responses from others."
          ]
        },
        {
          "title": "Volunteer Role",
          "points": [
            "Manage donation requests (view, edit).",
            "Role-based access control",
            "View statistical data (total users, funding, blood donation requests)."
          ]
        },
        {
          "title": "Public Pages",
          "points": [
            "Search Page for users to search for donors based on queries.",
            "Requests Page with a public list of pending blood donation requests.",
            "Blog Page Showcases published blogs written by admins or volunteers with rich-text support.",
            "Funding Page for user donations through Stripe Payment Gateway."
          ]
        },
        {
          "title": "Technical Features",
          "points": [
            "Firebase authentication for secure user authentication.",
            "JWT token-based authentication for role-based access control for all APIs.",
            "Stripe implementation for handling donation from funding page.",
            "Responsive UI across mobile, tablet, and desktop devices."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Tailwind CSS",
          "DaisyUI",
          "Material-UI",
          "Flowbite",
          "React Icons",
          "TanStack Query",
          "Axios",
          "React Hook Form",
          "Sonner",
          "SweetAlert2",
          "Stripe.js",
          "Jodit React",
          "React Share",
          "AOS",
          "React Helmet"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "Mongoose",
          "JWT (JSON Web Tokens)",
          "CORS",
          "Dotenv",
          "Stripe API"
        ]
      },
      {
        "title": "Deployment",
        "techList": ["Vercel", "Firebase Hosting"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "BloodBridge is a full-stack web application I built to connect blood donors with recipients in need. The project was a hands-on way for me to learn and apply the MERN stack (MongoDB, Express.js, React, Node.js) in a real-world project context. It focuses on key areas like role-based access control, user authentication, and data managementâ€”providing a user-friendly interface for managing blood donations."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Getting Started",
        "imageOnLeft": false,
        "content": {
          "text": "The Register Page lets users create an account by entering their email, name, and password. Users can upload a profile picture, select their blood group, and choose their district and upazila from dropdown menus. There is also a password confirmation field to avoid mistakes. If users already have an account, they can click the link to go to the login page. The process is simple and quick, making it easy to start using the platform.",
          "image": {
            "caption": "Register Page",
            "url": "/projects/web/bloodbridge/gallery1.png",
            "alt": "BloodBridge - Register Page"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": true,
        "title": "The Landing Page",
        "content": {
          "image": {
            "caption": "Landing Page",
            "url": "/projects/web/bloodbridge/gallery2.png",
            "alt": "BloodBridge - Register Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The landing page introduces the platform, highlighting its purpose to connect blood donors with recipients, and provides easy navigation to key sections like Blogs, Requests, and Funding. The page also includes a profile dropdown for users to access their dashboard for managing their accounts and other features based on their roles."
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": "",
        "content": [
          "Requests Page: Displays a list of pending blood donation requests and allows users to search and filter them.",
          "Search Page: Enables users to find donors based on criteria such as blood type and location.",
          "Funding Page: Allows users to contribute funds securely through Stripe integration.",
          "Blog Page: Showcases articles written by admins or volunteers with support for rich-text formatting."
        ]
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Donor Dashboard",
        "imageOnLeft": false,
        "content": {
          "text": "The donor dashboard allows donors to manage their profiles, create and edit donation requests, and view or delete existing requests. Donors can also respond to messages or actions related to their donation requests, ensuring they stay informed and connected with recipients.",
          "image": {
            "caption": "Donor Dashboard",
            "url": "/projects/web/bloodbridge/gallery3.png",
            "alt": "BloodBridge - Donor Dashboard"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Volunteer Dashboard",
        "content": "The volunteer dashboard provides tools for managing donation requests and viewing platform statistics. Volunteers can access a list of all donation requests, edit their details, and update their statuses to ensure accurate tracking. They can view statistical data, including the total number of users, active funding contributions, and blood donation requests."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Volunteer Dashboard",
            "url": "/projects/web/bloodbridge/gallery4.png",
            "alt": "BloodBridge - Volunteer Dashboard"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "Volunteer Dashboard",
        "content": "This dashboard is designed to help volunteers focus on monitoring and maintaining the accuracy of information across the platform. Volunteers do not have access to user management or funding controls, keeping their scope of actions specific to donation-related tasks."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Rich-Text Blog Editor",
        "imageOnLeft": true,
        "content": {
          "text": "The blogging tool allows both volunteers and admins to create, edit, and publish blog posts using a simple rich-text editor. It supports basic formatting options like headings, bold, italics, bullet points, and hyperlinks. Users can add images, format text, and organize content for better readability. Admins have full control over the publication, while volunteers can write and submit posts for review. This tool is designed to make content creation straightforward and ensure blogs are easy to read and manage.",
          "image": {
            "caption": "Blog Editor",
            "url": "/projects/web/bloodbridge/gallery5.png",
            "alt": "BloodBridge - Blog Editor"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Admin Dashboard",
        "content": "The admin dashboard allows full control over user management. Admins can view all user accounts, block or unblock users, and change user roles (Admin, Volunteer, Donor). They can quickly search for specific users and make necessary adjustments. This ensures that admins can manage platform users efficiently, ensuring appropriate access and maintaining smooth operation."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Admin Dashboard - User Management",
            "url": "/projects/web/bloodbridge/gallery7.png",
            "alt": "BloodBridge - Admin User Management"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The blog management section gives admins the ability to create, edit, publish, and delete blog posts. They can oversee all content, ensuring it is accurate and aligned with the platformâ€™s goals. Admins can manage the entire lifecycle of a blog post, from drafting to publication, and remove any content if needed. This feature ensures the platform's blog section remains organized and up to date."
      },
      {
        "type": "text-image",
        "hasTitle": false,
        "title": "Rich-Text Blog Editor",
        "imageOnLeft": false,
        "content": {
          "text": "Admins can manage all donation requests through the dashboard. They have the ability to create new requests, edit existing ones, delete irrelevant or outdated requests, and view details of all donation requests on the platform. This gives admins full oversight and control over the blood donation process, ensuring requests are properly handled and updated.",
          "image": {
            "caption": "Admin Dashboard - Donation Management",
            "url": "/projects/web/bloodbridge/gallery6.png",
            "alt": "BloodBridge - Admin Donation Management"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Responsive Design",
        "content": "The BloodBridge platform is designed to be fully responsive, meaning it adapts to different devices, including mobile phones, tablets, and desktop computers. The interface adjusts to various screen sizes, offering users a consistent and user-friendly experience across all devices. This ensures accessibility and ease of use, regardless of how users access the platform."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Responsive Design",
            "url": "/projects/web/bloodbridge/gallery8.png",
            "alt": "BloodBridge - Responsive Design"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Final Conclusion",
        "content": "Working on this project has given me valuable experience in building a full-stack application with real-world functionality. It taught me how to implement secure user authentication, particularly protecting private API endpoints using JWT tokens. This allowed me to handle role-based access and ensure that sensitive data was only accessible to authorized users. I also gained hands-on experience with integrating third-party services like Stripe for payment processing. Overall, the project strengthened my skills in both front-end and back-end development, helping me understand the complexities of building and securing a full-stack web application."
      }
    ]
  },
  {
    "id": "topshelf",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Top Shelf",
    "subtitle": "Library Management System",
    "coverPhoto": {
      "caption": "TopShelf - Site Overview",
      "url": "/projects/web/topshelf/cover.png",
      "alt": "TopShelf - Cover Photo"
    },
    "date": "2023-11-09",
    "tags": ["MongoDB", "Express.js", "React.js", "Node.js", "Firebase"],
    "summary": "TopShelf is a user-centric library management system designed to allow users to browse, borrow, and return books easily. The platform features a responsive design, category-based book display, borrowing and return system, and robust user authentication with Firebase. It integrates JWT tokens for secure operations and allows users to download books as PDFs. TopShelf ensures a seamless experience across devices with key features focused on usability and security.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/TopShelf-client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/TopShelf-server"
      }
    ],
    "demoLinks": [
      {
        "label": "Website",
        "url": "https://topshelf-79995.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Book Management",
          "points": [
            "Category-based book display for easy browsing.",
            "Detailed book information with borrow or read options.",
            "Each category links to a list of relevant books, with full book details available."
          ]
        },
        {
          "title": "Borrowing and Return System",
          "points": [
            "Borrow button prompts a modal for selecting return dates.",
            "Borrowed Books page tracks borrowed books with return dates and a return button.",
            "Borrowing decreases book quantity and adds books to userâ€™s borrowed list."
          ]
        },
        {
          "title": "Authentication and Security",
          "points": [
            "Firebase authentication for secure user login (email/password or Google).",
            "JWT token-based verification for secure CRUD operations on book-related pages.",
            "Error handling implemented for registration and login forms."
          ]
        },
        {
          "title": "Additional Features",
          "points": [
            "Responsive design across desktop and mobile.",
            "Theme toggle for dark/light modes.",
            "Downloadable book pages in PDF format.",
            "User-filtered borrowed books section."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Tailwind CSS",
          "DaisyUI",
          "Flowbite",
          "React Icons",
          "React Router",
          "Firebase",
          "Sonner",
          "SwiperJS",
          "react-rating"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "CORS",
          "Dotenv",
          "JWT",
          "Axios"
        ]
      },
      {
        "title": "Deployment",
        "techList": ["Vercel", "Firebase Hosting"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "TopShelf is a library management system built to efficiently manage book collections. I focused on developing an intuitive system for browsing, borrowing, and returning books. By implementing features such as book management, borrowing/returning systems, and secure user authentication, I gained hands-on experience in full-stack development, from the frontend interface to backend processes and security."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Book Categories and Details",
        "imageOnLeft": false,
        "content": {
          "text": "TopShelf organizes books into distinct categories for easy browsing. Each book has detailed information and offers the option to borrow or read. I implemented a real-time book availability system, which involved manipulating the data flow between the frontend and backend. This required working with React for dynamic content updates and integrating MongoDB to track book status and availability.",
          "image": {
            "caption": "Book Categories",
            "url": "/projects/web/topshelf/gallery1.png",
            "alt": "TopShelf - Book Categories"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": true,
        "title": "Borrowing and Return System",
        "content": {
          "image": {
            "caption": "Borrow and Return Book Modal",
            "url": "/projects/web/topshelf/gallery2.png",
            "alt": "TopShelf - Borrow and Return Modal"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "The borrowing and return system in TopShelf allows users to borrow books by selecting return dates. I implemented this feature by creating modals for date selection, which interact with the backend to update book availability. I also developed the 'Borrowed Books' page where users can manage their borrowed books and view the return dates. The challenge here was ensuring accurate updates in real-time to reflect borrowing actions and availability."
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": "",
        "content": [
          "Borrowing books triggers an update in the backend, which adjusts availability and adds the book to the user's borrowed list.",
          "The borrowed books page displays details such as borrow and return dates, which I built using React to dynamically render content from the database.",
          "Books can be returned by modifying the borrowed status and updating the book count in real-time, which required handling backend routes with Express."
        ]
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "User Authentication",
        "imageOnLeft": false,
        "content": {
          "text": "I integrated Firebase authentication to allow users to sign up and log in using either email/password or Google login. This required setting up Firebase on the backend and ensuring that authentication tokens were stored securely. To further enhance security, I used JWT tokens to authenticate API requests and authorize CRUD operations on book data, making sure only authenticated users could perform certain actions.",
          "image": {
            "caption": "Login Page",
            "url": "/projects/web/topshelf/gallery3.png",
            "alt": "TopShelf - Login Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "PDF Download and User-Specific Features",
        "content": "I implemented a feature that allows users to download pages of books as PDFs. This involved integrating a PDF generation library on the frontend to convert book content into downloadable files. Additionally, I developed a user-specific borrowed books section to track individual borrowings. This section retrieves data from MongoDB and dynamically updates based on the authenticated user, which helped me improve my skills in working with data filtering and user-specific views."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Borrowed Books Page",
            "url": "/projects/web/topshelf/gallery4.png",
            "alt": "TopShelf - Borrowed Books Page"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Final Conclusion",
        "content": "Developing TopShelf was an excellent opportunity to apply and refine my full-stack development skills. I gained extensive experience in frontend and backend development, working with technologies like React, Node.js, Express, and MongoDB. Implementing JWT authentication, real-time data updates, and PDF generation allowed me to deepen my understanding of web security, data management, and user interface development. Each feature presented its own challenges, and solving these helped me grow as a developer."
      }
    ]
  },
  {
    "id": "compharbor",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Comp Harbor",
    "subtitle": "E-Commerce Platform",
    "coverPhoto": {
      "caption": "Comp Harbor - Site Overview",
      "url": "/projects/web/compharbor/cover.png",
      "alt": "Comp Harbor - Cover Photo"
    },
    "date": "2023-10-21",
    "tags": ["MongoDB", "Express.js", "React.js", "Node.js", "Firebase"],
    "summary": "Computer Harbor is a tech e-commerce platform developed to enhance skills in building a MongoDB-Express.js backend and integrating it with a React frontend. The project focuses on implementing RESTful APIs for product and cart management, handling authentication with Firebase, and ensuring efficient data flow between the client and server. It also explores private routes, state management, and responsive UI design, with deployment on Vercel for the backend and Firebase for the frontend. Through this project, key concepts in full-stack development were reinforced, particularly in backend structuring.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/CompHarbor-client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/CompHarbor-server"
      }
    ],
    "demoLinks": [
      {
        "label": "Website",
        "url": "https://bytebrilliance-5c61e.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Product Management",
          "points": [
            "Brand-centric homepage displaying brand images and names for quick navigation.",
            "Private route for adding and updating products with image uploads and category details.",
            "Detailed product pages displaying product information with add-to-cart functionality."
          ]
        },
        {
          "title": "Cart Functionalities",
          "points": [
            "User-specific cart where each user can independently add or remove products.",
            "Private route for viewing and managing the cart, with options to delete unwanted items.",
            "Global product information synchronization ensuring cart updates reflect product changes."
          ]
        },
        {
          "title": "Authentication and Security",
          "points": [
            "Firebase authentication with email/password login and Google sign-in.",
            "Error handling for registration and login forms with relevant toasts for feedback.",
            "Dynamic redirects after login, registration, and product updates for a seamless user experience."
          ]
        },
        {
          "title": "Additional Features",
          "points": [
            "Responsive design ensuring compatibility across desktop and mobile devices.",
            "Dark/light theme toggle implemented using Tailwind dark classes.",
            "Dynamic page redirections based on user actions, such as login, product addition, or updates."
          ]
        },
        {
          "title": "Backend and Data Management",
          "points": [
            "Node.js and Express.js backend with MongoDB for storing product and cart data.",
            "Data persistence with real-time updates reflected across all relevant sections."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Tailwind CSS",
          "DaisyUI",
          "React Icons",
          "React Router",
          "Firebase",
          "Sonner",
          "SwiperJS",
          "react-rating"
        ]
      },
      {
        "title": "Backend",
        "techList": ["Node.js", "Express.js", "MongoDB"]
      },
      {
        "title": "Deployment",
        "techList": ["Vercel", "Firebase Hosting"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "Computer Harbor is a tech e-commerce platform designed to manage and display products from various brands. The primary objective was to develop a scalable system that integrates a MongoDB-Express backend with a React frontend. This project focused on implementing core functionalities such as product management, authentication, cart operations, and dynamic data synchronization while ensuring security and performance optimizations."
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Brand-Centric Product Display",
        "imageOnLeft": false,
        "content": {
          "text": "The homepage is structured to display brand names and images, enabling users to browse products by brand. This required designing an efficient database schema in MongoDB to associate products with specific brands and implementing React state management for seamless UI updates. Advertisements were integrated to highlight featured brands dynamically.",
          "image": {
            "caption": "Brand-Based Navigation",
            "url": "/projects/web/compharbor/gallery1.png",
            "alt": "Computer Harbor - Brand Display"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": true,
        "title": "Product Management System",
        "content": {
          "image": {
            "caption": "Product Add/Update Interface",
            "url": "/projects/web/compharbor/gallery2.png",
            "alt": "Computer Harbor - Product Management"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": false,
        "title": "",
        "content": "Users can add and update product details through a private route with a structured form. Product data is stored in MongoDB, ensuring persistence. The backend, built with Node.js and Express, handles image uploads and validates input before updating the database. The challenge was ensuring real-time updates across the UI after any modification."
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": "",
        "content": [
          "Product additions trigger real-time updates, ensuring immediate visibility across relevant sections.",
          "Backend routes handle CRUD operations with Express.js while ensuring data validation and error handling.",
          "Product details are dynamically fetched and displayed using React Router and state management."
        ]
      },
      {
        "type": "text-image",
        "hasTitle": true,
        "title": "Cart System with User-Specific Data",
        "imageOnLeft": false,
        "content": {
          "text": "Each authenticated user has a dedicated cart where products can be added or removed. Cart data is securely stored in MongoDB and associated with the user's ID. The backend ensures data persistence, while React manages state updates in real-time. This feature required optimizing database queries to handle multiple concurrent user operations efficiently.",
          "image": {
            "caption": "User Cart Management",
            "url": "/projects/web/compharbor/gallery3.png",
            "alt": "Computer Harbor - Cart System"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Authentication and Security",
        "content": "Firebase authentication is integrated for secure user login and registration. Users can authenticate using email/password or Google login. Error handling mechanisms provide feedback on login failures, invalid credentials, and registration issues."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": "",
        "content": {
          "image": {
            "caption": "Authentication System",
            "url": "/projects/web/compharbor/gallery4.png",
            "alt": "Computer Harbor - Login System"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Responsive UI and Theming",
        "content": "The platform features a responsive design built with Tailwind CSS and DaisyUI, ensuring usability across different devices. A theme toggle allows users to switch between light and dark modes, implemented using Tailwind dark mode classes. React components dynamically adjust styling based on the selected theme."
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Conclusion",
        "content": "Developing Computer Harbor provided hands-on experience in full-stack development with React, Node.js, Express, and MongoDB. The project emphasized data synchronization, real-time UI updates, authentication security, and efficient database structuring. Implementing features like user-specific carts and Firebase authentication strengthened backend integration skills, while responsive design and theming enhanced frontend capabilities."
      }
    ]
  },
  {
    "id": "offensive-tweet-classifier",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "AI & Machine Learning",
    "title": "Offensive Tweet Classifier",
    "subtitle": "Offensive Tweet Detection and Categorization",
    "coverPhoto": {
      "caption": "Offensive Tweet Classifier - Cover Photo",
      "url": "/projects/machinelearning/offensive/cover.png",
      "alt": "Offensive Tweet Classifier - Cover Photo"
    },
    "date": "2023-8-30",
    "tags": [
      "NLP",
      "Logistic Regression",
      "TF-IDF",
      "Classification",
      "Scikit-learn"
    ],
    "summary": "This project, developed for the Natural Language Processing (CSE440) course at BRAC University, focuses on detecting and categorizing offensive tweets using machine learning. Utilizing the Offensive Language Identification Dataset (OLID), I trained a logistic regression model with TF-IDF vectorization to classify tweets as offensive or non-offensive and further categorize them into targeted insults, threats, or untargeted profanity. I implemented data preprocessing techniques such as tokenization, lemmatization, and mention/symbol removal to enhance model performance. The model was evaluated using classification reports and confusion matrices. Through this project, I gained hands-on experience in text preprocessing, feature engineering, model training, and evaluation in NLP.",
    "githubLinks": [
      {
        "label": "GitHub",
        "url": "https://github.com/ShakeefAhmedRakin/Offensive-Tweet-Classifier"
      }
    ],
    "demoLinks": null,

    "coreFeatures": {
      "featureList": [
        {
          "title": "Text Preprocessing",
          "points": [
            "Dropped the 'id' column to remove unnecessary data.",
            "Handled missing values by filling NULLs in the category column and removing rows with missing tweet values.",
            "Converted all text to lowercase for uniform processing.",
            "Removed '@user' mentions to anonymize data and reduce noise.",
            "Eliminated non-alphanumeric characters and symbols.",
            "Tokenized text into words using NLTK's word_tokenize().",
            "Applied lemmatization using NLTK's WordNetLemmatizer for text normalization."
          ]
        },
        {
          "title": "Feature Extraction",
          "points": [
            "Utilized TfidfVectorizer from sklearn to convert preprocessed text into numerical feature vectors.",
            "Applied a trained TF-IDF vectorizer to transform new text data for model input."
          ]
        },
        {
          "title": "Model Training",
          "points": [
            "Implemented Logistic Regression for classification tasks.",
            "Trained two separate models: one for offensive detection and another for category detection.",
            "Configured Logistic Regression with max_iter=1000 to ensure proper model convergence."
          ]
        },
        {
          "title": "Model Evaluation",
          "points": [
            "Used classification reports to analyze precision, recall, and F1-score for each class.",
            "Generated confusion matrices to evaluate model performance on test data.",
            "Examined true positives, true negatives, false positives, and false negatives to assess classification accuracy."
          ]
        }
      ]
    },

    "techStack": [
      {
        "title": "Stack",
        "techList": [
          "Pandas",
          "Scikit-Learn",
          "NLTK",
          "TF-IDF Vectorizer",
          "Logistic Regression"
        ]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "This project focuses on building a machine learning model to classify tweets as offensive or non-offensive and categorize offensive tweets into specific types. The goal is to create a model that can identify offensive content on social media platforms and categorize it."
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Dataset",
        "content": "The dataset used is the Offensive Language Identification Dataset (OLID) v1.0, introduced in \"Predicting the Type and Target of Offensive Posts in Social Media\" by Zampieri et al. (2019). It contains multiple levels of classification: Level A (Offensive vs. Not Offensive), Level B (Targeted Insults vs. Untargeted), and Level C (Target type: Individual, Group, Other)."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": null,
        "content": {
          "image": {
            "caption": "Dataset",
            "url": "/projects/machinelearning/offensive/gallery3.png",
            "alt": "Dataset"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Preprocessing",
        "content": "The text data undergoes the following preprocessing steps:"
      },
      {
        "type": "list",
        "hasTitle": false,
        "title": null,
        "content": [
          "Column Removal: Dropped the 'id' column.",
          "Missing Value Handling: Filled NULL values in the category column with 'NULL' and removed rows with missing tweet values.",
          "Lowercasing: Converted all text to lowercase.",
          "Mention Removal: Removed '@user' mentions.",
          "Symbol Removal: Removed non-alphanumeric characters and symbols.",
          "Tokenization: Used NLTK's word_tokenize() function.",
          "Lemmatization: Applied NLTK's WordNetLemmatizer.",
          "Vectorization: Converted text into TF-IDF features using sklearn's TfidfVectorizer."
        ]
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Model Training",
        "content": "The model is trained using logistic regression.\n- Two instances of logistic regression are used for offensive detection and category detection.\n- Parameters: max_iter=1000 to ensure sufficient iterations for optimization."
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Model Evaluation",
        "content": "The trained models are evaluated using classification reports and confusion matrices.\n- The classification report provides precision, recall, and F1-score for each class.\n- The confusion matrix details true positives, true negatives, false positives, and false negatives."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": null,
        "content": {
          "image": {
            "caption": "Confusion Matrix - Offensive",
            "url": "/projects/machinelearning/offensive/gallery1.png",
            "alt": "Confusion Matrix - Offensive"
          }
        }
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": null,
        "content": {
          "image": {
            "caption": "Confusion Matrix - Classification",
            "url": "/projects/machinelearning/offensive/gallery2.png",
            "alt": "Confusion Matrix - Classification"
          }
        }
      },
      {
        "type": "list",
        "hasTitle": true,
        "title": "References",
        "content": [
          "Zampieri, M., Malmasi, S., Nakov, P., Rosenthal, S., Farra, N., & Kumar, R. (2019). Predicting the Type and Target of Offensive Posts in Social Media. Proceedings of NAACL.",
          "Zampieri, M., Malmasi, S., Nakov, P., Rosenthal, S., Farra, N., & Kumar, R. (2019). SemEval-2019 Task 6: Identifying and Categorizing Offensive Language in Social Media (OffensEval). Proceedings of The 13th International Workshop on Semantic Evaluation (SemEval)."
        ]
      }
    ]
  },
  {
    "id": "task-logger",
    "isFeatured": false,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "Task Logger",
    "subtitle": "Interactive Task Manager",
    "coverPhoto": {
      "caption": "Task Logger - Cover Photo",
      "url": "/projects/web/tasklogger/cover.png",
      "alt": "Task Logger - Cover Photo"
    },
    "date": "2023-12-22",
    "tags": ["MongoDB", "Express.js", "React.js", "Node.js", "Firebase"],
    "summary": "Task Logger is a drag-and-drop task management web application built with MongoDB, Express.js, React, Node.js (MERN stack), and Firebase, focusing on RESTful API development, authentication, and efficient data flow. It features secure authentication with Firebase, protected private routes, and real-time task organization with drag-and-drop functionality. The backend manages task storage and updates in MongoDB, while the React is used for the frontend. The backend is deployed on Vercel, while the frontend is hosted on Firebase, ensuring scalability and seamless client-server interaction. This project reinforces key full-stack development concepts, including API structuring, authentication workflows, and backend architecture.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/TaskLogger-client"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/TaskLogger-server"
      }
    ],
    "demoLinks": [
      {
        "label": "Website",
        "url": "https://tasklogger-4b2b9.web.app/"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "Task Management",
          "points": [
            "Drag-and-drop functionality for organizing tasks efficiently.",
            "Task creation, editing, and deletion with real-time updates.",
            "Categorization of tasks for better workflow management."
          ]
        },
        {
          "title": "User Authentication and Security",
          "points": [
            "Firebase authentication for secure login and registration.",
            "Protected routes implemented using React Router DOM.",
            "Error handling for authentication processes to ensure a smooth user experience."
          ]
        },
        {
          "title": "Database and API Integration",
          "points": [
            "MongoDB as the primary database for task storage and retrieval.",
            "Express.js RESTful API for handling task-related CRUD operations.",
            "Axios for efficient data fetching and communication between client and server."
          ]
        },
        {
          "title": "State Management and UI Enhancements",
          "points": [
            "React Query for managing API calls and caching data.",
            "React Hook Form for efficient form handling and validation.",
            "Real-time animations using AOS for a smooth user experience.",
            "Tailwind CSS and DaisyUI for responsive and modern UI design."
          ]
        }
      ]
    },

    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Vite",
          "Tailwind CSS",
          "DaisyUI",
          "React Router DOM",
          "React DnD",
          "React Hook Form",
          "TanStack React Query"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "Cors",
          "Dotenv",
          "Axios"
        ]
      },
      {
        "title": "Hosting & Deployment",
        "techList": ["Vercel (Backend)", "Firebase (Frontend & Authentication)"]
      }
    ],
    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Introduction & Purpose",
        "content": "Task Logger is a drag-and-drop task management application designed to enhance productivity by enabling users to organize and manage their tasks efficiently. It provides a seamless full-stack experience using React for the frontend, Express and MongoDB for the backend, and Firebase for authentication."
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Features",
        "content": "Task Logger includes features such as user authentication, task categorization, real-time updates, and private routes for secure access. The drag-and-drop functionality allows intuitive task reordering and prioritization."
      },
      {
        "type": "image",
        "hasTitle": false,
        "title": null,
        "content": {
          "image": {
            "caption": "Task Logger UI",
            "url": "/projects/web/tasklogger/gallery1.png",
            "alt": "Task Logger Interface"
          }
        }
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Backend & API",
        "content": "The backend is built using Node.js and Express.js, with MongoDB as the database. It provides RESTful APIs for task management, authentication, and user data handling. CORS and dotenv are used for security and environment configuration."
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Frontend Implementation",
        "content": "The frontend is built with React and Vite, utilizing Tailwind CSS and DaisyUI for a responsive UI. React Router DOM manages private and protected routes, while TanStack Query handles data fetching and state synchronization."
      },
      {
        "type": "list",
        "hasTitle": true,
        "title": "Key Technologies",
        "content": [
          "React with Vite for fast frontend development.",
          "React DnD for drag-and-drop functionality.",
          "Firebase Authentication for secure user login.",
          "MongoDB with Express.js for database and API management.",
          "React Query for efficient server-state management."
        ]
      },
      {
        "type": "text",
        "hasTitle": true,
        "title": "Hosting & Deployment",
        "content": "The backend is hosted on Vercel, while the frontend is deployed on Firebase, ensuring scalability and fast access."
      }
    ]
  },
  {
    "id": "agri-smart",
    "isFeatured": true,
    "isWorkInProgress": false,
    "type": "Web Development",
    "title": "AgriSmart",
    "subtitle": "Farm Management Website",
    "coverPhoto": {
      "caption": "AgriSmart - Cover Photo",
      "url": "/projects/web/agrismart/cover.png",
      "alt": "AgriSmart - Cover Photo"
    },
    "date": "2024-03-24",
    "tags": [
      "Gemini",
      "MongoDB",
      "Express.js",
      "React.js",
      "Node.js",
      "Firebase"
    ],
    "summary": "AgriSmart is a full-stack web application developed for a hackathon, designed to empower farmers with AI-driven assistance and comprehensive farm management tools. It features an AI assistant powered by Gemini AI to answer farming-related queries, alongside a community guide and forum for knowledge sharing. The platform includes a dashboard for tracking seed capacity, equipment status, crop and soil health monitoring, and storage capacities. While the implementation of cameras and sensors was not physically realized, the demo showcased how farmers could leverage smart technology for real-time farm insights, tool tracking, and maintenance scheduling.",
    "githubLinks": [
      {
        "label": "Frontend",
        "url": "https://github.com/ShakeefAhmedRakin/AgriSmart-frontend"
      },
      {
        "label": "Backend",
        "url": "https://github.com/ShakeefAhmedRakin/AgriSmart-backend"
      }
    ],
    "demoLinks": [
      {
        "label": "Website",
        "url": "https://agrismart-a3c49.web.app"
      }
    ],
    "coreFeatures": {
      "featureList": [
        {
          "title": "AI-Powered Farming Assistance",
          "points": [
            "Integration of Gemini AI for natural language processing and real-time query resolution.",
            "RESTful API endpoints for AI-based responses to farming-related queries.",
            "Efficient state management for seamless user interactions with the AI assistant."
          ]
        },
        {
          "title": "Community Engagement and Knowledge Sharing",
          "points": [
            "Implementation of a forum using MongoDB and Express.js for user discussions.",
            "Authentication and authorization using Firebase for secure user interactions.",
            "Real-time data updates with React Query for smooth forum engagement."
          ]
        },
        {
          "title": "Farm Management Dashboard",
          "points": [
            "Dynamic UI built with React, Tailwind CSS, and DaisyUI for responsive design.",
            "Database architecture using MongoDB to store seed capacity, equipment status, and crop monitoring data.",
            "Express.js API to handle CRUD operations for managing farming resources."
          ]
        },
        {
          "title": "Smart Farming Integrations",
          "points": [
            "Conceptual IoT integration for tracking soil and crop health with sensor data processing.",
            "Potential use of WebSockets for real-time data streaming from sensors and cameras.",
            "Scalable architecture for future IoT and machine learning model deployment."
          ]
        }
      ]
    },
    "techStack": [
      {
        "title": "Frontend",
        "techList": [
          "React.js",
          "Vite",
          "Tailwind CSS",
          "DaisyUI",
          "React Router DOM",
          "React Hook Form",
          "TanStack React Query",
          "Firebase"
        ]
      },
      {
        "title": "Backend",
        "techList": [
          "Node.js",
          "Express.js",
          "MongoDB",
          "Cors",
          "Dotenv",
          "Axios",
          "Gemini AI",
          "Nodemon"
        ]
      },
      {
        "title": "Hosting & Deployment",
        "techList": ["Vercel (Backend)", "Firebase (Frontend & Authentication)"]
      }
    ],

    "overviewSections": [
      {
        "type": "text",
        "hasTitle": true,
        "title": "Work-In-Progress Section",
        "content": ""
      }
    ]
  }
]
